package malha;
/**
	Component class
	Serves as the base class for all future component.
	Components are reusable elements of gameplay/logic that can be embedded in gameObjects

	User-created Components should inherit from this class
	The user code should not create a component by hand. They are created by the ComponentManager

	To create a component, create a new class (usually in the components folder) -
	ex: class Renderer extends Component {
	
	}

	Then to add a component to an object:
	gameObject.addComponent(Renderer);

	(Do not instantiate components manually. The componentsManager takes care of that)
**/
import lime.graphics.RenderContext;

class Component {
	/**
	 * Unique id - Readable, non-writable
	 **/
	public var id(default, null): String;
	public var gameObject: GameObject;

	/*
	 *	Component Constructor
	 * 	@param id 	A Unique id (generated by the components manager)
	 **/
	public function new (id) {
		this.id = id;
	}

	/*
	 * 		Attaches a gameObject to this component
	 * 		@param gameObject 	The game object to attach
	 * 		This function is called automatically when adding a component to a gameobject
	 **/
	public function attach (gameObject: GameObject) {
		this.gameObject = gameObject;
	}

	/*
	 * 		Destroys the component, unattaching it from its linked gameObject
	 *		@todo detach the component from its gameObject before deleting it
	 **/
	public function destroy () {
		ComponentsManager.removeComponent(Type.getClass(this), id);
	}

	/**
	 * 		Gets the id of this component
	 *		@return id 		The id string
	 */
	public function get_id ():String {
		return id;
	}

	/*
	 * 		function called each frame by the engine, before any update function
	 * 		Can be overriden by any component if needed
	 **/
	public function preUpdate () {

	}

	/*
	 * 		function called each frame by the engine, before any physics operations
	 * 		Can be overriden by any component if needed
	 *		Most of the game's update code should reside in here
	 **/
	public function update () {

	}

	/*
	 * 		function called each frame by the engine, after all physics operations and update
	 * 		Can be overriden by any component if needed
	 * 		Should be called if you need some stuff done after everything
	 **/
	public function postUpdate () {

	}

	/*
	 * 		function called each frame by the engine, after everything else, to draw on the screen
	 * 		Can be overriden by any component if needed
	 * 		Components that display something to the screen should do it here
	 *		@param 	context The rendering context (openGL, canvas...)
	 *		@todo 	Check if other parameters should stay here. Probably not.
	 **/
	public function render (context:Dynamic, window: Dynamic, config: Dynamic) {

	}
}